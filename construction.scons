import os
import compilers
import envBuilder
import utils

AddOption('--platform',
          dest='platform',
          type='choice',
          nargs=1,
          choices=["native", "beagle", "android"],
          action='store',
          metavar='ARCHITECTURE',
          default='native',
          help='Specify platform.')

AddOption('--android-abi',
          dest='abi',
          type='choice',
          nargs=1,
          choices=["armeabi-v7a", "arm64-v8a", "x86", "x86-64"],
          action='store',
          metavar='ABI',
          default='x86',
          help='Specify Android ABI.')

AddOption('--type',
          dest='build-type',
          type='choice',
          nargs=1,
          choices=["debug", "release"],
          action='store',
          metavar='BUILD-TYPE',
          default='release',
          help='Specify build type (relase, debug etc).')

AddOption('--install-path',
          dest='install-path',
          type='string',
          nargs=1,
          action='store',
          metavar='PATH-PREFIX',
          default='#install',
          help='Specify installation directory prefix, e.g /usr/local')

# Determine build configuration from command line options:
platform = GetOption('platform')
android_abi = GetOption('abi')
buildType = GetOption('build-type')
installRoot = GetOption('install-path')

if not utils.TargetIsValid(platform):
    raise RuntimeError("Invalid platform/architecture: " + platform)

if not utils.BuildTypeIsValid(buildType):
    raise RuntimeError("Invalid build type: " + buildType)

# Setup the compiler:
compiler = compilers.makeCompilerFor(platform, buildType, android_abi)
compiler.AppendFlags( '-Wall -pedantic' )

print("Compiler cmd: " + compiler.cmd)
print("Compiler path: " + compiler.path)
print("Compiler sysroot: " + compiler.sysroot)

# Initialise the environment to use this compiler:
env = envBuilder.makeEnvForCompiler(compiler)
env.Decider('MD5-timestamp')
env['platform'] = platform
env['abi'] = android_abi

install_path = os.path.join(installRoot, platform)
if platform in ['android']:
    install_path = os.path.join(install_path, android_abi)
env['installPath'] = Dir(install_path).abspath

subdirs = utils.FindSconsDirs( './' )
for sconsDir in subdirs:
    sconsFile = os.path.join(sconsDir, 'SConscript')
    buildPath = os.path.join('build', platform, sconsDir, buildType)
    if platform in ['android']:
        buildPath = os.path.join(buildPath, android_abi)

    clonedEnv = env.Clone()
    SConscript( sconsFile, variant_dir=buildPath, duplicate=0, exports={ 'env' : clonedEnv, 'compiler' : compiler } )

