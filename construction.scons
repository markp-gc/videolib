import os
import compilers
import envBuilder
import utils

AddOption( '--platform',
           dest='platform',
           type='string',
           nargs=1,
           action='store',
           metavar='ARCHITECTURE',
           default='native',
           help='Specify platform/architecture to build for: native, beagle, android')

AddOption( '--type',
           dest='build-type',
           type='string',
           nargs=1,
           action='store',
           metavar='BUILD-TYPE',
           default='release',
           help='Specify build type: debug,release')

AddOption( '--install-path',
           dest='install-path',
           type='string',
           nargs=1,
           action='store',
           metavar='PATH-PREFIX',
           default='#install',
           help='Specify installation directory prefix, e.g /usr/local')

# Determine build configuration from command line options:
platform = GetOption('platform')
buildType = GetOption('build-type')
installPath = GetOption('install-path')

if not utils.TargetIsValid(platform):
    raise RuntimeError("Invalid platform/architecture: " + platform)

if not utils.BuildTypeIsValid(buildType):
    raise RuntimeError("Invalid build type: " + buildType)

# Setup the compiler:
compiler = compilers.makeCompilerFor(platform, buildType)
compiler.AppendFlags( '-Wall -pedantic' )

print("Compiler cmd: " + compiler.cmd)
print("Compiler path: " + compiler.path)
print("Compiler sysroot: " + compiler.sysroot)

# Initialise the environment to use this compiler:
env = envBuilder.makeEnvForCompiler(compiler)
env.Decider('MD5-timestamp')
env['platform'] = platform
env['installPath'] = Dir(os.path.join(installPath, platform)).abspath

subdirs = utils.FindSconsDirs( './' )
for sconsDir in subdirs:
    sconsFile = os.path.join( sconsDir, 'SConscript' )
    buildPath = os.path.join( 'build', platform, sconsDir, buildType )
    clonedEnv = env.Clone()
    SConscript( sconsFile, variant_dir=buildPath, duplicate=0, exports={ 'env' : clonedEnv, 'compiler' : compiler } )

