import os
import compilers
import envBuilder
import utils

AddOption( '--platform',
           dest='platform',
           type='string',
           nargs=1,
           action='store',
           metavar='ARCHITECTURE',
           default='native',
           help='Specify platform/architecture to build for: native,beagle,android')

AddOption( '--type',
           dest='build-type',
           type='string',
           nargs=1,
           action='store',
           metavar='BUILD-TYPE',
           default='release',
           help='Specify build type: debug,release')

# Determine build configuration from command line options:
platform = GetOption('platform')
buildType = GetOption('build-type')

if not utils.TargetIsValid(platform):
    print 'Invalid platform/architecture: ' + platform
    Exit(1)

if not utils.BuildTypeIsValid(buildType):
    print 'Invalid build type: ' + buildType
    Exit(1)

# Setup the compiler:
compiler = compilers.makeCompilerFor(platform,buildType)
compiler.AppendFlags( '-Wall -pedantic' )

# Initialise the environment to use this compiler:
env = envBuilder.makeEnvForCompiler(compiler)

env.Decider('MD5-timestamp')

env['platform'] = platform

subdirs = utils.FindSconsDirs( './' )
for sconsDir in subdirs:
    sconsFile = os.path.join( sconsDir, 'SConscript' )
    buildPath = os.path.join( 'build', platform, sconsDir, buildType )
    clonedEnv = env.Clone()
    SConscript( sconsFile, variant_dir=buildPath, duplicate=0, exports={ 'env' : clonedEnv, 'target' : platform, 'compiler' : compiler } )

