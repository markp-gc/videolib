import os

SRC_FILES  = Glob( 'test/*.cpp' )
SRC_FILES += Glob( 'src/*.cpp' )

HEADER_FILES  = Glob( 'src/*.h' )
HEADER_FILES += Glob( 'test/*.h' )
HEADER_FILES += Glob( 'android/*.h' )

HOME = '/home/markp'
DEV_ROOT = os.path.join(HOME, 'development')
DEV_INC = os.path.join(DEV_ROOT, 'install/native/usr/local/include')
DEV_LIB = os.path.join(DEV_ROOT, 'install/native/usr/local/lib')
ROBOLIB_ROOT = os.path.join(DEV_ROOT, 'robolib')

INC_DIRS  = [
              './test',
              './src',
              os.path.join(ROBOLIB_ROOT, 'src/network'),
              os.path.join(ROBOLIB_ROOT, 'src/packetcomms'),
              os.path.join(ROBOLIB_ROOT, 'src/robotcomms'),
              os.path.join(ROBOLIB_ROOT, 'src/motor_control'),
              os.path.join(DEV_ROOT, 'cereal-1.2.2/include'),
              os.path.join(DEV_INC),
              '/usr/include/unicap'
            ]

LIBDIRS = [DEV_LIB, '/usr/local/glk/lib']

libs = ['avformat', 'avcodec', 'avutil', 'swscale', 'videolib', 'robolib', 'opencv_imgproc','opencv_calib3d','opencv_highgui', 'opencv_core', 'glkcore', 'glk', 'pthread']

cxx = 'g++'
cxxflags = '-std=c++11 -g -O0'
defines = [ '__STDC_CONSTANT_MACROS', '__STDC_LIMIT_MACROS' ]

env = Environment( ENV = {'PATH' : os.environ['PATH']} )
env.Append( CPPPATH=INC_DIRS )
env.Append( CPPDEFINES=defines )
env.Append( LINKFLAGS = [ '-Wl,-rpath,/usr/local/glk/lib:/usr/local/videolib/lib:/home/mark/code/robolib/builds/linux_build/' ] )
env.Append( LIBPATH=LIBDIRS )
env.Append( LIBS=libs )
builtLibrary = env.Program( target='runtest', source=SRC_FILES, CXX=cxx, CXXFLAGS=cxxflags )

